plugins {
	alias libs.plugins.fabric.loom
	alias libs.plugins.minotaur
	alias libs.plugins.cursegradle
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
group = project.maven_group

version = "${project.mod_version}+${libs.versions.minecraft.get()}"
boolean isBuild = System.getenv('GITHUB_WORKFLOW') == 'build'
version = !isBuild ? version : "${version}+build.${System.getenv('GITHUB_RUN_NUMBER')}"

repositories {
	maven {
		name = 'Quilt'
		url = 'https://maven.quiltmc.org/repository/release'
	}
	maven {
		name = 'Quilt Snapshots'
		url = 'https://maven.quiltmc.org/repository/snapshot'
	}

	// Recursive resources maven
	maven { url "https://maven.enjarai.nl/releases" }
	// Required for recursive resources
	maven { url "https://maven.enjarai.nl/mirrors" }
}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft libs.minecraft
	mappings variantOf(libs.quilt.mappings) { classifier("intermediary-v2") }
	modImplementation libs.fabric.loader

	modImplementation libs.fabric.api

	// With modImplementation it breaks on runtime
	modCompileOnly(libs.recursive.resources) {
		exclude group: "com.terraformersmc", module: "modmenu"
	}
}

processResources {
	inputs.property "version", project.version
	inputs.property "vt_version", project.vt_version

	filesMatching("fabric.mod.json") {
		expand "version": project.version, "vt_version": project.vt_version
	}
}

tasks.withType(JavaCompile).configureEach {
	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	// If Javadoc is generated, this must be specified in that task too.
	it.options.encoding = "UTF-8"

	// Minecraft 1.18 upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

modrinth {
	token = project.hasProperty('modrinth_token') ? project.property('modrinth_token') : System.getenv('MODRINTH_TOKEN')
	projectId = '1E2sq1cp'
	versionNumber = project.version
	versionName = "VTDownloader ${project.mod_version} for Minecraft 1.20.2"
	uploadFile = remapJar
	changelog = "A changelog can be found at https://github.com/IotaBread/VTDownloader/releases/tag/${project.mod_version}"
	gameVersions = ['1.20.2']
	loaders = ['fabric', 'quilt']
}

curseforge {
	if (project.hasProperty('curse_api_key') || System.getenv('CURSE_API_KEY') != null) {
		apiKey = project.hasProperty('curse_api_key') ? project.property('curse_api_key') : System.getenv('CURSE_API_KEY')
	}
	project {
		id = '432425'
		changelog = "A changelog can be found at https://github.com/IotaBread/VTDownloader/releases/tag/${project.mod_version}"
		releaseType = 'release'
		addGameVersion '1.20.2'
		addGameVersion 'Fabric'
		addGameVersion 'Quilt'
		mainArtifact(remapJar) {
			displayName = "VTDownloader ${project.mod_version} for Minecraft 1.20.2"
		}
		afterEvaluate {
			uploadTask.dependsOn('remapJar')
		}
	}
	options {
		forgeGradleIntegration = false
	}
}

publish.finalizedBy tasks.modrinth, tasks.curseforge

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// Select the repositories you want to publish to
	// To publish to maven local, no extra repositories are necessary. Just use the task `publishToMavenLocal`.
	repositories {
		// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
		mavenLocal()
	}
}
